*
* Log keeping track of changes in RLG.r3_CANASUViGHi project
* * * * *

* * *
* 26.02.2015	Aleksandar Dimitrov	<alexandar921@abv.bg>

* Added method static Color HSL2RGB(double h, double sl, double l) to
 convert HSL color to XNA's RGB format.

* Greeting at MessageLog constructor call added. Gradient colors
 calculated and used for the greeting message.

* Interface ISoundSourceObject now implements IGameObject, instead of
 being a generic interface of <T> where T : IGameObject.


* * *
* 25.02.2015	Aleksandar Dimitrov	<alexandar921@abv.bg>

* The MessageLog now works as expected; splits too long string to
 several rows, and uses in-string code to denote a specifically
 colored letter/word/string (check Models/ColorMessages.txt for 
 more details).

* MessageLog now correctly calculates and splits long lines, adding
 LeftPadding and the space character width (with the selected font)
 to the text screen length.

* Words selector ('W', 'w') for colored messages now break on white
 space, and not on punctuation - meaning punctuation after a selected
 word will also be selected. 

* Moved the class MessageLog from Models/ to Framework/ project folder.

* Created the IFringe interface (which implements IDrawableObject) to
 use for fringe objects on the map. The Fringe class implements IFringe
 to instantiate Fringe objects.

* Modified Tools.GenerateMap() to have a chance to spawn a Fringe
 object "Tree" on non-blocked Tiles.

* Added class FringeSprites to GameData/Sprites/, and a static reference
 in class GameData.Sprite to load and keep all Fringe object textures.

* Method bool IMap.CheckTile(Point p) changed to have an string out
 parameter as well - bool CheckTile(Point p, out string blocking) to
 return the string representation of the object blocking the Tile (if
 blocked, else returns null);

* ITile interface int Fringe { get; set } changed to 
 IFringe Fringe { get; set; } to use the new IFringe interface.
 Corresponding changes made to the class Tile.

* Implemented a "sound" system for the game. Objects implementing 
 abstract class SoundSourceObject : GameObject, ISoundSource can create
 a Sound : ISound object through MakeSound(...) and send it to the 
 SoundReceiver (implemented by the IMessageLog interface now). In order
 to use the sound system you should assign SoundReceiver object to
 SoundSourceObject.SoundReceiver.

* As a result of the sound system, class Actor now implements abstract
  class SoundSourceObject : GameObject (changed from : GameObject).

* The Actor now makes sounds on spawn/bumping in blocked Tiles.

* Added field static readonly Color TileMask to class Models\Map to use 
 for masking Tiles that have Flag.HasBeenSeen.


* * *
* 24.02.2015	Aleksandar Dimitrov	<alexandar921@abv.bg>

* Created an interface IMessageLog to use to draw and keep string
 messages. class MessageLog now implements the interface.


* * *
* 23.02.2015	Aleksandar Dimitrov	<alexandar921@abv.bg>

* First commit of the started before several days project based on
 an older project -MonoGame_RLG.Revival-CANASUViGHi.

* Implemented IEnumerable<T> for the PriorityQueue class, to iterate
 over the contained actor list.

* Implemented the class PriorityQueue for objects implementing IActor 
 in the GameEngine, to keep track of all actors on the map, and giving 
 them option to act according to their energy value. [Turn system]

* Added method PushKey(Keys key) to the KeyboardBuffer class, to
 return keys that were not processed currently, otherwise they are lost.

* Added property int MovementCost to ITerrain, to show the cost for 
 moving into a certain terrain type.

* Added class MonsterSprites to keep all loaded monster sprites, and
 created a reference to it in the Sprite class.

* Return type of method Move(CardinalDirection direction) in IActor
 changed to int, to show the cost of the move made. Returns 0 if the
 move was unsuccessful.

* Creating a object of type Actor now automatically raises the 
 Flag.IsBlocked for the Actor created.

* Implemented Field of View calculation for the Map.
	- Spawning NPCs do not work for some reason. -
	+ Issue was incorrectly assigning and keeping Flags to a Tile in
	which a Actor has been. Working correctly now by clearing the 
	Tile Flags we do not need. +
